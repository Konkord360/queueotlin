/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.kapp

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runTest
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.assertNotNull
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.net.ServerSocket
import java.net.Socket

@kotlin.uuid.ExperimentalUuidApi
class AppTest {
    @Test
    fun `should send and receive message from the server after connection`() = runTest {
        val server = ServerSocket(9092)
        launch(Dispatchers.IO) {
            startServer(server)
        }

        // client simulation
        Socket("localhost", 9092).use { socket -> 
            val input = BufferedReader(InputStreamReader(socket.getInputStream()))
            val output = BufferedWriter(OutputStreamWriter(socket.getOutputStream()))

            println("Test writing to the server")

            output.write("WRITE|test-topic|Hello there!")
            output.newLine()
            output.flush()

            val inputFromServer = input.readLine() ?: ""
            println("Got $inputFromServer from the server")
        }

        stopServer(server)
    }
}
