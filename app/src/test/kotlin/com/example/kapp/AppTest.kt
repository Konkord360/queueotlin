/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.kapp

import io.kotest.matchers.equals.shouldBeEqual
import io.kotest.matchers.shouldBe
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runTest
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.assertNotNull
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.net.ServerSocket
import java.net.Socket

@kotlin.uuid.ExperimentalUuidApi
class AppTest {
    @Test
    fun `client should receive message from the server that another client sent`() = runTest {
        val server = ServerSocket(9092)
        launch(Dispatchers.IO) {
            startServer(server)
        }

        // client simulation
        
        Socket("localhost", 9092).use { socket -> 
            val input = BufferedReader(InputStreamReader(socket.getInputStream()))
            val output = BufferedWriter(OutputStreamWriter(socket.getOutputStream()))

            println("Test writing to the server")

            output.write("WRITE|test-topic|Hello there!")
            output.newLine()
            output.flush()
        }

        delay(1000)

        Socket("localhost", 9092).use { socket -> 
            val input = BufferedReader(InputStreamReader(socket.getInputStream()))
            val output = BufferedWriter(OutputStreamWriter(socket.getOutputStream()))

            println("Test writing to the server")

            output.write("POLL|test-topic|")
            output.newLine()
            output.flush()

            val response = input.readLine().split("|")
            response[0] shouldBe  "OK"
            response[1] shouldBe  "Hello there!"
        }

        println("stopping server")
        stopServer(server)
    }

    @Test
    fun `server should responsd with no messages message after a long poll`() = runTest {
        val server = ServerSocket(9092)
        launch(Dispatchers.IO) {
            startServer(server)
        }

        Socket("localhost", 9092).use { socket -> 
            val input = BufferedReader(InputStreamReader(socket.getInputStream()))
            val output = BufferedWriter(OutputStreamWriter(socket.getOutputStream()))

            println("Test writing to the server")

            output.write("POLL|test-topic|")
            output.newLine()
            output.flush()

            val response = input.readLine().split("|")
            response[0] shouldBe  "OK"
            response[1] shouldBe  "TOPIC_DOES_NOT_EXIST"
        }
        println("stopping server")
        stopServer(server)
    }
    

}
